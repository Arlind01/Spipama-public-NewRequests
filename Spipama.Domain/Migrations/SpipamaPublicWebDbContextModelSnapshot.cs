// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spipama.Domain.Context;

namespace Spipama.Domain.Migrations
{
    [DbContext(typeof(SpipamaPublicWebDbContext))]
    partial class SpipamaPublicWebDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Spipama.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailNotification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ActionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("BudgetCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BudgetCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BudgetTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileRef")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StrategyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__ActionPlan__Id");

                    b.ToTable("ActionPlans");
                });

            modelBuilder.Entity("Spipama.Domain.Models.EmailTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBodyHtml")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__EmailTemplates__Id");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("Spipama.Domain.Models.IndicatorSpecific", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Base")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ObjectiveSpecificId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsibleInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__IndicatorSpecific__Id");

                    b.HasIndex("IndicatorStatusId");

                    b.HasIndex("ObjectiveSpecificId");

                    b.HasIndex("ResponsibleInstitutionId");

                    b.ToTable("IndicatorSpecifics");
                });

            modelBuilder.Entity("Spipama.Domain.Models.IndicatorSpecificDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Indicator")
                        .HasColumnType("int");

                    b.Property<int?>("IndicatorAchieved")
                        .HasColumnType("int");

                    b.Property<Guid?>("IndicatorSpecificId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__IndicatorSpecificDetails__Id");

                    b.HasIndex("IndicatorSpecificId");

                    b.ToTable("IndicatorSpecificDetails");
                });

            modelBuilder.Entity("Spipama.Domain.Models.IndicatorStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__IndicatorStatus__Id");

                    b.ToTable("IndicatorStatuses");
                });

            modelBuilder.Entity("Spipama.Domain.Models.IndicatorStrategic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Base")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorFinal")
                        .HasColumnType("int");

                    b.Property<int?>("IndicatorFinalAchieved")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorStatusId")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorTemp")
                        .HasColumnType("int");

                    b.Property<int?>("IndicatorTempAchieved")
                        .HasColumnType("int");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ObjectiveStrategicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsibleInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__IndicatorStrategic__Id");

                    b.HasIndex("IndicatorStatusId");

                    b.HasIndex("ObjectiveStrategicId");

                    b.HasIndex("ResponsibleInstitutionId");

                    b.ToTable("IndicatorStrategics");
                });

            modelBuilder.Entity("Spipama.Domain.Models.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Institution__Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Spipama.Domain.Models.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClearMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditedObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Object")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Logs__Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Spipama.Domain.Models.Measure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MeasureStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("ObjectiveSpecificId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Product")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Reference")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ResponsibleInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalBudgetSpent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Measure__Id");

                    b.HasIndex("MeasureStatusId");

                    b.HasIndex("ObjectiveSpecificId");

                    b.HasIndex("ResponsibleInstitutionId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("Spipama.Domain.Models.MeasureDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BudgetSpent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StrategySourceOfFundingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__MeasureDetails__Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("StrategySourceOfFundingId");

                    b.ToTable("MeasureDetails");
                });

            modelBuilder.Entity("Spipama.Domain.Models.MeasureResponsibleInstitution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasuresResponsibleInstitutions");
                });

            modelBuilder.Entity("Spipama.Domain.Models.MeasureStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__MeasureStatus__Id");

                    b.ToTable("MeasuresStatus");
                });

            modelBuilder.Entity("Spipama.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Acknowledge")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Notification__Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ObjectiveSpecific", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("BudgetCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BudgetCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BudgetTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("ObjectiveStrategicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__ObjectiveSpecific__Id");

                    b.HasIndex("ObjectiveStrategicId");

                    b.ToTable("ObjectiveSpecifics");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ObjectiveStrategic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__ObjectiveStrategic__Id");

                    b.HasIndex("ActionPlanId");

                    b.ToTable("ObjectiveStrategics");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ReportingResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IndicatorSpecificId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IndicatorStrategicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__ReportingResult__Id");

                    b.HasIndex("IndicatorSpecificId");

                    b.HasIndex("IndicatorStrategicId");

                    b.HasIndex("MeasureId");

                    b.ToTable("ReportingResults");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ReportingResultDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FileRef")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReportingResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__ReportingResultDocument__Id");

                    b.HasIndex("ReportingResultId");

                    b.ToTable("ReportingResultDocuments");
                });

            modelBuilder.Entity("Spipama.Domain.Models.StrategySourceOfFunding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__StrategySourceOfFunding__Id");

                    b.HasIndex("ActionPlanId");

                    b.ToTable("StrategySourceOfFundings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Spipama.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Spipama.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spipama.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Spipama.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spipama.Domain.Models.IndicatorSpecific", b =>
                {
                    b.HasOne("Spipama.Domain.Models.IndicatorStatus", "IndicatorStatus")
                        .WithMany()
                        .HasForeignKey("IndicatorStatusId")
                        .HasConstraintName("FK_IndicatorSpecific_IndicatorStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spipama.Domain.Models.ObjectiveSpecific", "ObjectiveSpecific")
                        .WithMany()
                        .HasForeignKey("ObjectiveSpecificId")
                        .HasConstraintName("FK_IndicatorSpecific_ObjectiveSpecificId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spipama.Domain.Models.Institution", "ResponsibleInstitution")
                        .WithMany()
                        .HasForeignKey("ResponsibleInstitutionId")
                        .HasConstraintName("FK_IndicatorSpecific_ResponsibleInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndicatorStatus");

                    b.Navigation("ObjectiveSpecific");

                    b.Navigation("ResponsibleInstitution");
                });

            modelBuilder.Entity("Spipama.Domain.Models.IndicatorSpecificDetails", b =>
                {
                    b.HasOne("Spipama.Domain.Models.IndicatorSpecific", "IndicatorSpecific")
                        .WithMany()
                        .HasForeignKey("IndicatorSpecificId")
                        .HasConstraintName("FK_IndicatorSpecific_IndicatorSpecificId");

                    b.Navigation("IndicatorSpecific");
                });

            modelBuilder.Entity("Spipama.Domain.Models.IndicatorStrategic", b =>
                {
                    b.HasOne("Spipama.Domain.Models.IndicatorStatus", "IndicatorStatus")
                        .WithMany()
                        .HasForeignKey("IndicatorStatusId")
                        .HasConstraintName("FK_IndicatorStrategic_IndicatorStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spipama.Domain.Models.ObjectiveStrategic", "ObjectiveStrategic")
                        .WithMany()
                        .HasForeignKey("ObjectiveStrategicId")
                        .HasConstraintName("FK_IndicatorStrategic_ObjectiveStrategicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spipama.Domain.Models.Institution", "ResponsibleInstitution")
                        .WithMany()
                        .HasForeignKey("ResponsibleInstitutionId")
                        .HasConstraintName("FK_IndicatorStrategic_ResponsibleInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndicatorStatus");

                    b.Navigation("ObjectiveStrategic");

                    b.Navigation("ResponsibleInstitution");
                });

            modelBuilder.Entity("Spipama.Domain.Models.Measure", b =>
                {
                    b.HasOne("Spipama.Domain.Models.MeasureStatus", "MeasureStatus")
                        .WithMany()
                        .HasForeignKey("MeasureStatusId")
                        .HasConstraintName("FK_Measure_MeasureStatusId");

                    b.HasOne("Spipama.Domain.Models.ObjectiveSpecific", "ObjectiveSpecific")
                        .WithMany()
                        .HasForeignKey("ObjectiveSpecificId")
                        .HasConstraintName("FK_Measure_ObjectiveSpecificId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spipama.Domain.Models.Institution", "ResponsibleInstitution")
                        .WithMany()
                        .HasForeignKey("ResponsibleInstitutionId")
                        .HasConstraintName("FK_Measure_ResponsibleInstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeasureStatus");

                    b.Navigation("ObjectiveSpecific");

                    b.Navigation("ResponsibleInstitution");
                });

            modelBuilder.Entity("Spipama.Domain.Models.MeasureDetails", b =>
                {
                    b.HasOne("Spipama.Domain.Models.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .HasConstraintName("FK_MeasureDetails_MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spipama.Domain.Models.StrategySourceOfFunding", "StrategySourceOfFunding")
                        .WithMany()
                        .HasForeignKey("StrategySourceOfFundingId")
                        .HasConstraintName("FK_MeasureDetails_StrategySourceOfFundingId");

                    b.Navigation("Measure");

                    b.Navigation("StrategySourceOfFunding");
                });

            modelBuilder.Entity("Spipama.Domain.Models.MeasureResponsibleInstitution", b =>
                {
                    b.HasOne("Spipama.Domain.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .HasConstraintName("FK_MeasureResponsibleInstitution_InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spipama.Domain.Models.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .HasConstraintName("FK_MeasureResponsibleInstitution_MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ObjectiveSpecific", b =>
                {
                    b.HasOne("Spipama.Domain.Models.ObjectiveStrategic", "ObjectiveStrategic")
                        .WithMany()
                        .HasForeignKey("ObjectiveStrategicId")
                        .HasConstraintName("FK_ObjectiveSpecific_ObjectiveStrategicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectiveStrategic");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ObjectiveStrategic", b =>
                {
                    b.HasOne("Spipama.Domain.Models.ActionPlan", "ActionPlan")
                        .WithMany()
                        .HasForeignKey("ActionPlanId")
                        .HasConstraintName("FK_ObjectiveStrategic_ActionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionPlan");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ReportingResult", b =>
                {
                    b.HasOne("Spipama.Domain.Models.IndicatorSpecific", "IndicatorSpecific")
                        .WithMany()
                        .HasForeignKey("IndicatorSpecificId")
                        .HasConstraintName("FK_ReportingResult_IndicatorSpecificId");

                    b.HasOne("Spipama.Domain.Models.IndicatorStrategic", "IndicatorStrategic")
                        .WithMany()
                        .HasForeignKey("IndicatorStrategicId")
                        .HasConstraintName("FK_ReportingResult_IndicatorStrategicId");

                    b.HasOne("Spipama.Domain.Models.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .HasConstraintName("FK_ReportingResult_MeasureId");

                    b.Navigation("IndicatorSpecific");

                    b.Navigation("IndicatorStrategic");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("Spipama.Domain.Models.ReportingResultDocument", b =>
                {
                    b.HasOne("Spipama.Domain.Models.ReportingResult", "ReportingResult")
                        .WithMany()
                        .HasForeignKey("ReportingResultId")
                        .HasConstraintName("FK_ReportingResultDocument_ReportingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportingResult");
                });

            modelBuilder.Entity("Spipama.Domain.Models.StrategySourceOfFunding", b =>
                {
                    b.HasOne("Spipama.Domain.Models.ActionPlan", "ActionPlan")
                        .WithMany()
                        .HasForeignKey("ActionPlanId")
                        .HasConstraintName("FK_StrategySourceOfFunding_ActionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
